# Docker Compose configuration for testing Render.com deployment locally
# This simulates the Render.com environment for local testing

version: '3.8'

services:
  # MySQL Database Service (simulating external database)
  mysql-db:
    image: mysql:8.0
    container_name: sales-management-mysql-render
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD:-root_password}
      MYSQL_DATABASE: ${DB_NAME:-sales_management}
      MYSQL_USER: ${DB_USERNAME:-sales_user}
      MYSQL_PASSWORD: ${DB_PASSWORD:-sales_password}
      MYSQL_ROOT_HOST: '%'
    ports:
      - "${DB_PORT:-3306}:3306"
    volumes:
      - mysql_render_data:/var/lib/mysql
      - ./docker/mysql/init:/docker-entrypoint-initdb.d
    networks:
      - render-network
    command: --default-authentication-plugin=mysql_native_password --ssl-mode=REQUIRED
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "127.0.0.1", "-u", "${DB_USERNAME:-sales_user}", "-p${DB_PASSWORD:-sales_password}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # Spring Boot Backend Service (simulating Render.com deployment)
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: sales-management-backend-render
    restart: unless-stopped
    environment:
      # Render.com style environment variables
      PORT: ${PORT:-8081}
      SPRING_PROFILES_ACTIVE: render
      
      # Database configuration (using DATABASE_URL format like Render.com)
      DATABASE_URL: mysql://${DB_USERNAME:-sales_user}:${DB_PASSWORD:-sales_password}@mysql-db:3306/${DB_NAME:-sales_management}?useSSL=true&allowPublicKeyRetrieval=true&serverTimezone=UTC&useUnicode=true&characterEncoding=utf8
      
      # Alternative individual variables (comment out DATABASE_URL if using these)
      # DB_HOST: mysql-db
      # DB_PORT: 3306
      # DB_NAME: ${DB_NAME:-sales_management}
      # DB_USERNAME: ${DB_USERNAME:-sales_user}
      # DB_PASSWORD: ${DB_PASSWORD:-sales_password}
      
      # Security configuration
      JWT_SECRET: ${JWT_SECRET:-bXlTZWNyZXRLZXkxMjM0NTY3ODkwMTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkw}
      JWT_EXPIRATION: ${JWT_EXPIRATION:-86400000}
      
      # CORS configuration
      CORS_ALLOWED_ORIGINS: ${CORS_ALLOWED_ORIGINS:-http://localhost:3000,http://localhost:8080}
      CORS_ALLOWED_METHODS: ${CORS_ALLOWED_METHODS:-GET,POST,PUT,DELETE,OPTIONS}
      CORS_ALLOWED_HEADERS: ${CORS_ALLOWED_HEADERS:-*}
      
      # Database pool configuration
      DB_POOL_MAX_SIZE: ${DB_POOL_MAX_SIZE:-15}
      DB_POOL_MIN_IDLE: ${DB_POOL_MIN_IDLE:-3}
      DB_POOL_CONNECTION_TIMEOUT: ${DB_POOL_CONNECTION_TIMEOUT:-30000}
      DB_POOL_IDLE_TIMEOUT: ${DB_POOL_IDLE_TIMEOUT:-300000}
      
      # Logging configuration
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      LOG_LEVEL_WEB: ${LOG_LEVEL_WEB:-WARN}
      LOG_LEVEL_SQL: ${LOG_LEVEL_SQL:-WARN}
      
      # File upload configuration
      MAX_FILE_SIZE: ${MAX_FILE_SIZE:-500MB}
      MAX_REQUEST_SIZE: ${MAX_REQUEST_SIZE:-500MB}
      UPDATE_STORAGE_PATH: ${UPDATE_STORAGE_PATH:-/tmp/versions}
      
      # JVM optimization for containers
      JAVA_OPTS: ${JAVA_OPTS:--Xmx512m -Xms256m -XX:+UseContainerSupport -XX:MaxRAMPercentage=75.0}
      
    ports:
      - "${PORT:-8081}:${PORT:-8081}"
    volumes:
      - ./logs:/app/logs
      - render_storage:/tmp/versions
    networks:
      - render-network
    depends_on:
      mysql-db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://127.0.0.1:${PORT:-8081}/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 120s

# Named volumes for data persistence
volumes:
  mysql_render_data:
    driver: local
  render_storage:
    driver: local

# Custom network for service communication
networks:
  render-network:
    driver: bridge
